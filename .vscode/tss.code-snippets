{
    "Get function": {
        "scope": "powershell",
        "prefix": "gettss",
        "body": [
            "function Get-Tss${1:Verb} {",
            "\t<#",
            "\t.SYNOPSIS",
            "\t${2:Short of what command does}",
            "",
            "\t.DESCRIPTION",
            "\t${3:Longer of what command does}",
            "",
            "\t.PARAMETER TssSession",
            "\tTssSession object created by New-TssSession",
            "",
            "\t.PARAMETER ${4:Parameters for command}",
            "\t${5:Description of parameter}",
            "",
            "\t.PARAMETER Raw",
            "\tOutput the raw response from the REST API endpoint",
            "",
            "\t.EXAMPLE",
            "\tPS C:\\> \\$session = New-TssSession -SecretServer https://alpha -Credential \\$ssCred",
            "\tPS C:\\> Get-Tss${1} -TssSession \\$session -${4} ${6:some test value}",
            "",
            "\t${7:Add minimum example for each parameter}",
            "",
            "\t.NOTES",
            "\tRequires TssSession object returned by New-TssSession",
            "\t#>",
            "\t[CmdletBinding()]",
            "\t[OutputType('Tss${1}')]",
            "\tparam (",
            "\t\t# TssSession object passed for auth info",
            "\t\t[Parameter(Mandatory,",
            "\t\t\tVaultFromPipeline,",
            "\t\t\tPosition = 0)]",
            "\t\t[TssSession]\\$TssSession,",
            "",
            "\t\t# short statement on parameter",
            "\t\t[Parameter(Mandatory,ValueFromPipelineByPropertyName)]",
            "\t\t[Alias(\"${1}Id\")]",
            "\t\t[int[]]",
            "\t\t\\$${4},",
            "",
            "\t\t# output the raw response from the API endpoint",
            "\t\t[switch]",
            "\t\t\\$Raw",
            "\t)",
            "\tbegin {",
            "\t\t\\$tssParams = . \\$GetParams \\$PSBoundParameters 'Get-Tss${1}'",
            "\t\t\\$invokeParams = @{ }",
            "\t}",
            "",
            "\tprocess {",
            "\t\tif (\\$tssParams.Contains('TssSession') -and \\$TssSession.IsValidSession()) {",
            "\t\t\tforeach (\\$${8} in \\$${4}) {",
            "\t\t\t\t\\$restResponse = $null",
            "\t\t\t\t\\$uri = \\$TssSession.SecretServer + (\\$TssSession.ApiVersion, \"${1}\", \\$${9}.ToString() -join '/')",
            "\t\t\t\t\\$invokeParams.Uri = \\$uri",
            "\t\t\t\t\\$invokeParams.Method = 'GET'",
            "",
            "\t\t\t\t\\$invokeParams.PersonalAccessToken = \\$TssSession.AccessToken",
            "\t\t\t\t\\$restResponse = Invoke-TssRestApi @invokeParams",
            "",
            "\t\t\t\tif (\\$tssParams['Raw']) {",
            "\t\t\t\t\treturn \\$restRespons",
            "\t\t\t\t}",
            "\t\t\t\tif (\\$restResponse) {",
            "\t\t\t\t\t# Do any formatting or call object part",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t} else {",
            "\t\t\tWrite-Warning \"No valid session found\"",
            "\t\t}",
            "\t}",
            "}"
        ],
        "description": "template for building a Get function"
    },
    "Base Test": {
        "scope": "powershell",
        "prefix": "tsstest",
        "body": [
            "BeforeDiscovery {",
            "\t\\$commandName = Split-Path (\\$PSCommandPath.Replace.('.Tests.ps1','')) -Leaf",
            "}",
            "\tDescribe \"\\$commandName verify parameters\" {",
            "\tBeforeDiscovery {",
            "\t\t[object[]]\\$knownParameters = 'TssSession','Raw'",
            "\t\t[object[]]\\$currentParams = ([Management.Automation.CommandMetaData]\\$ExecutionContext.SessionState.InvokeCommand.GetCommand(\\$commandName,'Function')).Parameters.Keys",
            "\t\t\\$unknownParameters = Compare-Object -ReferenceObject \\$knownParameters -DifferenceObject \\$currentParms -PassThru",
            "\t}",
            "\tContext \"Verify parmaeters\" -Forceach @{currentParams = \\$currentParams} {",
            "\t\tIt \"\\$commandName should contain <_> parameter\" -TestCases \\$knownParameters {",
            "\t\t\t\\$_ -in \\$currentParams | Should -Be \\$true",
            "\t\t}",
            "\t\tIt \"\\$commandName should not contain parameter: <_>\" -TestCases \\$unknownParameters {",
            "\t\t\t\\$_ | Should -BeNullOrEmpty",
            "\t\t}",
            "\t}",
            "}"
        ],
        "description": "template for tests with Thycotic.SecretServer"
    }
}