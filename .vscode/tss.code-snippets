{
    "Search function": {
        "scope": "powershell",
        "prefix": "tsssearch",
        "body": [
            "function Search-${1:Verb} {",
            "\t<#",
            "\t.SYNOPSIS",
            "\t${2:Short of what command does}",
            "",
            "\t.DESCRIPTION",
            "\t${3:Longer of what command does}",
            "",
            "\t.EXAMPLE",
            "\tPS> \\$session = New-TssSession -SecretServer https://alpha -Credential \\$ssCred",
            "\tPS> Search-Tss${1} -TssSession \\$session -${4} ${5:some test value}",
            "",
            "\t${6:Add minimum example for each parameter}",
            "",
            "\t.NOTES",
            "\tRequires TssSession object returned by New-TssSession",
            "\t#>",
            "\t[CmdletBinding()]",
            "\t[OutputType('Tss${7}')]",
            "\tparam (",
            "\t\t# TssSession object created by New-TssSession for auth",
            "\t\t[Parameter(Mandatory,",
            "\t\t\tValueFromPipeline,",
            "\t\t\tPosition = 0)]",
            "\t\t[TssSession]\\$TssSession,",
            "",
            "\t\t# Short description for parameter",
            "\t\t[Alias(\"${1}Id\")]",
            "\t\t[int]",
            "\t\t\\$${4},",
            "",
            "\t\t# Sort by specific property, default ${1}Name",
            "\t\t[string]",
            "\t\t\\$SortBy = '${1}Name'",
            "\t)",
            "\tbegin {",
            "\t\t\\$tssParams = \\$PSBoundParameters",
            "\t\t\\$invokeParams = @{ }",
            "\t}",
            "",
            "\tprocess {",
            "\t\tWrite-Verbose \"Provided command parameters: \\$(. \\$GetInvocation \\$PSCmdlet.MyInvocation)\"",
            "\t\tif (\\$tssParams.ContainsKey('TssSession') -and \\$TssSession.IsValidSession()) {",
            "\t\t\t\\$restResponse = \\$null",
            "\t\t\t\\$uri = \\$TssSession.ApiUrl, '${1}s' -join '/'",
            "\t\t\t\\$uri = \\$uri, \"sortBy[0].direction=asc&sortBy[0].name=\\$SortBy&take=\\$(\\$TssSession.Take)\" -join '?'",
            "",
            "\t\t\t\\$filters = @()",
            "\t\t\tif (\\$tssParams.ContainsKey('${4}')) {",
            "\t\t\t\t\\$filters += \"filter.${4}=\\$${4}\"",
            "\t\t\t}",
            "\t\t\tif (\\$filters) {",
            "\t\t\t\t\\$uriFilter = \\$filters -join '&'",
            "\t\t\t\tWrite-Verbose \"Filters: \\$uriFilter\"",
            "\t\t\t\t\\$uri = \\$uri, \\$uriFilter -join '&'",
            "\t\t\t}",
            "",
            "\t\t\t\\$invokeParams.Uri = \\$uri",
            "\t\t\t\\$invokeParams.Method = 'GET'",
            "",
            "\t\t\t\\$invokeParams.PersonalAccessToken = \\$TssSession.AccessToken",
            "\t\t\tWrite-Verbose \"\\$(\\$invokeParams.Method) \\$uri with: \\$body\"",
            "\t\t\ttry {",
            "\t\t\t\t\\$restResponse = Invoke-TssRestApi @invokeParams",
            "\t\t\t} catch {",
            "\t\t\t\tWrite-Warning \"Issue on search request\"",
            "\t\t\t\t\\$err = \\$_",
            "\t\t\t\t. \\$ErrorHandling \\$err",
            "\t\t\t}",
            "",
            "\t\t\tif (\\$restResponse.records.Count -le 0 -and \\$restResponse.records.Length -eq 0) {",
            "\t\t\t\tWrite-Warning \"No ${1} found\"",
            "\t\t\t}",
            "\t\t\tif (\\$restResponse.records) {",
            "\t\t\t\t. \\$Tss${7}Object \\$restResponse.records",
            "\t\t\t}",
            "\t\t} else {",
            "\t\t\tWrite-Warning \"No valid session found\"",
            "\t\t}",
            "\t}",
            "}"
        ],
        "description": "template for building a Search function"
    },
    "Get function": {
        "scope": "powershell",
        "prefix": "tssget",
        "body": [
            "function Get-${1:Verb} {",
            "\t<#",
            "\t.SYNOPSIS",
            "\t${2:Short of what command does}",
            "",
            "\t.DESCRIPTION",
            "\t${3:Longer of what command does}",
            "",
            "\t.EXAMPLE",
            "\tPS> \\$session = New-TssSession -SecretServer https://alpha -Credential \\$ssCred",
            "\tPS> Get-Tss${1} -TssSession \\$session -${4} ${5:some test value}",
            "",
            "\t${6:Add minimum example for each parameter}",
            "",
            "\t.NOTES",
            "\tRequires TssSession object returned by New-TssSession",
            "\t#>",
            "\t[CmdletBinding()]",
            "\t[OutputType('Tss${1}')]",
            "\tparam (",
            "\t\t# TssSession object created by New-TssSession for auth",
            "\t\t[Parameter(Mandatory,",
            "\t\t\tValueFromPipeline,",
            "\t\t\tPosition = 0)]",
            "\t\t[TssSession]\\$TssSession,",
            "",
            "\t\t# Short description for parameter",
            "\t\t[Parameter(Mandatory,ValueFromPipelineByPropertyName)]",
            "\t\t[Alias(\"${1}Id\")]",
            "\t\t[int[]]",
            "\t\t\\$${4}",
            "\t)",
            "\tbegin {",
            "\t\t\\$tssParams = \\$PSBoundParameters",
            "\t\t\\$invokeParams = @{ }",
            "\t}",
            "",
            "\tprocess {",
            "\t\tWrite-Verbose \"Provided command parameters: \\$(. \\$GetInvocation \\$PSCmdlet.MyInvocation)\"",
            "\t\tif (\\$tssParams.ContainsKey('TssSession') -and \\$TssSession.IsValidSession()) {",
            "\t\t\tforeach (\\$${7} in \\$${4}) {",
            "\t\t\t\t\\$restResponse = \\$null",
            "\t\t\t\t\\$uri = \\$TssSession.ApiUrl, '${1}', \\$${8} -join '/'",
            "\t\t\t\t\\$invokeParams.Uri = \\$uri",
            "\t\t\t\t\\$invokeParams.Method = 'GET'",
            "",
            "\t\t\t\t\\$invokeParams.PersonalAccessToken = \\$TssSession.AccessToken",
            "\t\t\t\tWrite-Verbose \"\\$(\\$invokeParams.Method) \\$uri with \\$body\"",
            "\t\t\t\ttry {",
            "\t\t\t\t\t\\$restResponse = Invoke-TssRestApi @invokeParams",
            "\t\t\t\t} catch {",
            "\t\t\t\t\tWrite-Warning \"Issue getting ___ on [\\$${7}]\"",
            "\t\t\t\t\t\\$err = \\$_",
            "\t\t\t\t\t. \\$ErrorHandling \\$err",
            "\t\t\t\t}",
            "",
            "\t\t\t\tif (\\$restResponse) {",
            "\t\t\t\t\t# Do any formatting or call object part",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t} else {",
            "\t\t\tWrite-Warning \"No valid session found\"",
            "\t\t}",
            "\t}",
            "}"
        ],
        "description": "template for building a Get function"
    },
    "Remove function": {
        "scope": "powershell",
        "prefix": "tssremove",
        "body": [
            "function Remove-${1:Verb} {",
            "\t<#",
            "\t.SYNOPSIS",
            "\t${2:Short of what command does}",
            "",
            "\t.DESCRIPTION",
            "\t${3:Longer of what command does}",
            "",
            "\t.EXAMPLE",
            "\tPS> \\$session = New-TssSession -SecretServer https://alpha -Credential \\$ssCred",
            "\tPS> Remove-Tss${1} -TssSession \\$session -${4} ${5:some test value}",
            "",
            "\t${6:Add minimum example for each parameter}",
            "",
            "\t.NOTES",
            "\tRequires TssSession object returned by New-TssSession",
            "\t#>",
            "\t[CmdletBinding(SupportsShouldProcess)]",
            "\t[OutputType('TssDelete')]",
            "\tparam (",
            "\t\t# TssSession object created by New-TssSession for auth",
            "\t\t[Parameter(Mandatory,",
            "\t\t\tValueFromPipeline,",
            "\t\t\tPosition = 0)]",
            "\t\t[TssSession]\\$TssSession,",
            "",
            "\t\t# Short description for parameter",
            "\t\t[Parameter(Mandatory,ValueFromPipelineByPropertyName)]",
            "\t\t[Alias(\"${1}Id\")]",
            "\t\t[int[]]",
            "\t\t\\$${4}",
            "\t)",
            "\tbegin {",
            "\t\t\\$tssParams = \\$PSBoundParameters",
            "\t\t\\$invokeParams = @{ }",
            "\t}",
            "",
            "\tprocess {",
            "\t\tWrite-Verbose \"Provided command parameters: \\$(. \\$GetInvocation \\$PSCmdlet.MyInvocation)\"",
            "\t\tif (\\$tssParams.ContainsKey('TssSession') -and \\$TssSession.IsValidSession()) {",
            "\t\t\tforeach (\\$${7} in \\$${4}) {",
            "\t\t\t\t\\$restResponse = \\$null",
            "\t\t\t\t\\$uri = \\$TssSession.ApiUrl, '${9}', \\$${7} -join '/'",
            "\t\t\t\t\\$invokeParams.Uri = \\$uri",
            "\t\t\t\t\\$invokeParams.Method = 'DELETE'",
            "",
            "\t\t\t\t\\$invokeParams.PersonalAccessToken = \\$TssSession.AccessToken",
            "\t\t\t\tif (-not \\$PSCmdlet.ShouldProcess(\\$${7},\"\\$(\\$invokeParams.Method) \\$uri\")) { return }",
            "\t\t\t\tWrite-Verbose \"\\$(\\$invokeParams.Method) \\$uri with \\$body\"",
            "\t\t\t\ttry {",
            "\t\t\t\t\t\\$restResponse = Invoke-TssRestApi @invokeParams",
            "\t\t\t\t} catch {",
            "\t\t\t\t\tWrite-Warning \"Issue removing [\\$${7}]\"",
            "\t\t\t\t\t\\$err = \\$_",
            "\t\t\t\t\t. \\$ErrorHandling \\$err",
            "\t\t\t\t}",
            "",
            "\t\t\t\tif (\\$restResponse) {",
            "\t\t\t\t\t[TssDelete]@{",
            "\t\t\t\t\t\tId = \\$restResponse.id",
            "\t\t\t\t\t\tObjectType = \\$restResponse.objectType",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t} else {",
            "\t\t\tWrite-Warning \"No valid session found\"",
            "\t\t}",
            "\t}",
            "}"
        ],
        "description": "template for building a Remove function"
    },
    "Base Test": {
        "scope": "powershell",
        "prefix": "tsstest",
        "body": [
            "BeforeDiscovery {",
            "\t\\$commandName = Split-Path (\\$PSCommandPath.Replace('.Tests.ps1','')) -Leaf",
            "\t. ([IO.Path]::Combine([string]\\$PSScriptRoot, '..', 'constants.ps1'))",
            "}",
            "Describe \"\\$commandName verify parameters\" {",
            "\tBeforeDiscovery {",
            "\t\t[object[]]\\$knownParameters = 'TssSession'",
            "\t\t[object[]]\\$currentParams = ([Management.Automation.CommandMetaData]\\$ExecutionContext.SessionState.InvokeCommand.GetCommand(\\$commandName,'Function')).Parameters.Keys",
            "\t\t[object[]]\\$commandDetails = [System.Management.Automation.CommandInfo]\\$ExecutionContext.SessionState.InvokeCommand.GetCommand(\\$commandName,'Function')",
            "\t\t\\$unknownParameters = Compare-Object -ReferenceObject \\$knownParameters -DifferenceObject \\$currentParams -PassThru",
            "\t}",
            "\tContext \"Verify parmaeters\" -Foreach @{currentParams = \\$currentParams} {",
            "\t\tIt \"\\$commandName should contain <_> parameter\" -TestCases \\$knownParameters {",
            "\t\t\t\\$_ -in \\$currentParams | Should -Be \\$true",
            "\t\t}",
            "\t\tIt \"\\$commandName should not contain parameter: <_>\" -TestCases \\$unknownParameters {",
            "\t\t\t\\$_ | Should -BeNullOrEmpty",
            "\t\t}",
            "\t}",
            "\tContext \"Command specific details\" {",
            "\t\tIt \"\\$commandName should set OutputType to TssClassName\" -TestCases \\$commandDetails {",
            "\t\t\t\\$_.OutputType.Name | Should -Be 'TssClassName'",
            "\t\t}",
            "\t}",
            "}",
            "Describe \"\\$commandName works\" {",
            "\tBeforeDiscovery {",
            "\t\t\\$session = New-TssSession -SecretServer \\$ss -Credential \\$ssCred",
            "\t\t\\$invokeParams = @{",
            "\t\t\tUri = \"\\$ss/api/v1/folders?take=\\$(\\$session.take)\"",
            "\t\t\tExpandProperty = 'records'",
            "\t\t\tPersonalAccessToken = \\$session.AccessToken",
            "\t\t}",
            "\t\t\\$getFolders = Invoke-TssRestApi @invokeParams",
            "\t\t\\$tssSecretFolder = \\$getFolders.Where({\\$_.folderPath -match '\\tss_module_testing'})",
            "\t\t# Prep work",
            "",
            "\t\t\\$session.SessionExpire()",
            "\t\t\\$props = 'Prop1', 'Prop2', 'Prop3'",
            "\t}",
            "\tContext \"Checking\" -Foreach @{object = \\$object} {",
            "\t\tIt \"Should not be empty\" {",
            "\t\t\t\\$object | Should -Not -BeNullOrEmpty",
            "\t\t}",
            "\t\tIt \"Should output <_> property\" -TestCases \\$props {",
            "\t\t\t\\$object[0].PSObject.Properties.Name | Should -Contain \\$_",
            "\t\t}",
            "\t}",
            "}"
        ],
        "description": "template for tests with Thycotic.SecretServer"
    },
    "Base Part": {
        "scope": "powershell",
        "prefix": "tsspart",
        "body": [
            "<#",
            "\t.Synopsis",
            "\t\tCreates a ${1:Class name} object to output the ${2:Model Name} object",
            "#>",
            "param(",
            "\t[pscustomobject]\\$Object",
            ")",
            "",
            "begin {",
            "\t\\$Properties = \\$Object[0].PSObject.Properties.Name",
            "\t\\$itemProperties = \\$Object.items[0].PSObject.Properties.Name",
            "}",
            "",
            "process {",
            "\t\\$items = @()",
            "\t\tforeach (\\$i in \\$Object.items) {",
            "\t\t\t\\$item = [${3:Child class name}]::new()",
            "\t\t\tforeach (\\$iProp in \\$itemProperties) {",
            "\t\t\t\tif (\\$iProp -in \\$item.PSObject.Properties.Name) {",
            "\t\t\t\t\t\\$item.\\$iProp = \\$i.\\$iProp",
            "\t\t\t\t} else {",
            "\t\t\t\t\tWrite-Warning \"Property \\$iProp does not exist in the ${3} class. Please create a bug report at https://github.com/thycotic-ps/thycotic.secretserver/issues/new/choose\"",
            "\t\t\t\t}",
            "\t\t\t\t\\$items += \\$item",
            "\t\t\t}",
            "\t\t}",
            "",
            "\t\t\\$outObject = @()",
            "\t\tforeach (\\$s in \\$Object) {",
            "\t\t\t\\$currentObject = [${1}]::new()",
            "\t\t\t\tforeach (\\$sProp in \\$Properties) {",
            "\t\t\t\t\tif (\\$sProp -eq 'items') {",
            "\t\t\t\t\t\t\\$outObject.Items = \\$items",
            "\t\t\t\t\t}",
            "\t\t\t\t\tif (\\$sProp -in \\$currentObject.PSObject.Properties.Name) {",
            "\t\t\t\t\t\t\\$currentObject.\\$sProp = \\$s.\\$sProp",
            "\t\t\t\t\t} else {",
            "\t\t\t\t\t\tWrite-Warning \"Property \\$sProp does not exist in the ${1} class. Please create a bug report at https://github.com/thycotic-ps/thycotic.secretserver/issues/new/choose\"",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t\t\\$outObject += \\$currentObject",
            "\t\t}",
            "\t\treturn \\$outObject",
            "}"
        ],
        "description": "template for parts with Thycotic.SecretServer"
    },
    "About Help": {
        "prefix": "tssabout",
        "body": [
            "TOPIC",
            "\tThis help topic describes the ${1:Class name} class in the Thycotic.SecretServer module",
            "",
            "CLASS",
            "\t${1}",
            "",
            "INHERITANCE",
            "\tNone",
            "",
            "DESCRIPTION",
            "\tThe ${1} class represents the ${2: Model object name from API doc} object returned by Secret Server endpoint ${3:endpoint}",
            "",
            "CONSTRUCTORS",
            "\tnew()",
            "",
            "PROPERTIES",
            "\tDocumented in the REST API doc for Secret Server, see ${2} definition",
            "",
            "METHODS",
            "",
            "RELATED LINKS:",
            "\t${4:Function name utilizing it, list multiple if it applies}"
        ],
        "description": "template for the about_classname_help.txt files"
    }
}