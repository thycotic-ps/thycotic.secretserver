{
    "Search function": {
        "scope": "powershell",
        "prefix": "tsssearch",
        "body": [
            "function Search-${1:Verb} {",
            "    <#",
            "    .SYNOPSIS",
            "    ${2:Short of what command does}",
            "",
            "    .DESCRIPTION",
            "    ${3:Longer of what command does}",
            "",
            "    .EXAMPLE",
            "    PS> \\$session = New-TssSession -SecretServer https://alpha -Credential \\$ssCred",
            "    PS> Search-Tss${1} -TssSession \\$session -${4} ${5:some test value}",
            "",
            "    ${6:Add minimum example for each parameter}",
            "",
            "    .NOTES",
            "    Requires TssSession object returned by New-TssSession",
            "    #>",
            "    [CmdletBinding()]",
            "    [OutputType('Tss${7}')]",
            "    param (",
            "        # TssSession object created by New-TssSession for auth",
            "        [Parameter(Mandatory,",
            "            ValueFromPipeline,",
            "            Position = 0)]",
            "        [TssSession]\\$TssSession,",
            "",
            "        # Short description for parameter",
            "        [Alias(\"${1}Id\")]",
            "        [int]",
            "        \\$${4},",
            "",
            "        # Sort by specific property, default ${1}Name",
            "        [string]",
            "        \\$SortBy = '${1}Name'",
            "    )",
            "    begin {",
            "        \\$tssParams = \\$PSBoundParameters",
            "        \\$invokeParams = @{ }",
            "    }",
            "",
            "    process {",
            "        Write-Verbose \"Provided command parameters: \\$(. \\$GetInvocation \\$PSCmdlet.MyInvocation)\"",
            "        if (\\$tssParams.ContainsKey('TssSession') -and \\$TssSession.IsValidSession()) {",
            "            \\$restResponse = \\$null",
            "            \\$uri = \\$TssSession.ApiUrl, '${1}s' -join '/'",
            "            \\$uri = \\$uri, \"sortBy[0].direction=asc&sortBy[0].name=\\$SortBy&take=\\$(\\$TssSession.Take)\" -join '?'",
            "",
            "            \\$filters = @()",
            "            if (\\$tssParams.ContainsKey('${4}')) {",
            "                \\$filters += \"filter.${4}=\\$${4}\"",
            "            }",
            "            if (\\$filters) {",
            "                \\$uriFilter = \\$filters -join '&'",
            "                Write-Verbose \"Filters: \\$uriFilter\"",
            "                \\$uri = \\$uri, \\$uriFilter -join '&'",
            "            }",
            "",
            "            \\$invokeParams.Uri = \\$uri",
            "            \\$invokeParams.Method = 'GET'",
            "",
            "            \\$invokeParams.PersonalAccessToken = \\$TssSession.AccessToken",
            "            Write-Verbose \"\\$(\\$invokeParams.Method) \\$uri with: \\$body\"",
            "            try {",
            "                \\$restResponse = Invoke-TssRestApi @invokeParams",
            "            } catch {",
            "                Write-Warning \"Issue on search request\"",
            "                \\$err = \\$_",
            "                . \\$ErrorHandling \\$err",
            "            }",
            "",
            "            if (\\$restResponse.records.Count -le 0 -and \\$restResponse.records.Length -eq 0) {",
            "                Write-Warning \"No ${1} found\"",
            "            }",
            "            if (\\$restResponse.records) {",
            "                . \\$Tss${7}Object \\$restResponse.records",
            "            }",
            "        } else {",
            "            Write-Warning \"No valid session found\"",
            "        }",
            "    }",
            "}"
        ],
        "description": "template for building a Search function"
    },
    "Get function": {
        "scope": "powershell",
        "prefix": "tssget",
        "body": [
            "function Get-${1:Verb} {",
            "    <#",
            "    .SYNOPSIS",
            "    ${2:Short of what command does}",
            "",
            "    .DESCRIPTION",
            "    ${3:Longer of what command does}",
            "",
            "    .EXAMPLE",
            "    PS> \\$session = New-TssSession -SecretServer https://alpha -Credential \\$ssCred",
            "    PS> Get-Tss${1} -TssSession \\$session -${4} ${5:some test value}",
            "",
            "    ${6:Add minimum example for each parameter}",
            "",
            "    .NOTES",
            "    Requires TssSession object returned by New-TssSession",
            "    #>",
            "    [CmdletBinding()]",
            "    [OutputType('Tss${1}')]",
            "    param (",
            "        # TssSession object created by New-TssSession for auth",
            "        [Parameter(Mandatory,",
            "            ValueFromPipeline,",
            "            Position = 0)]",
            "        [TssSession]\\$TssSession,",
            "",
            "        # Short description for parameter",
            "        [Parameter(Mandatory,ValueFromPipelineByPropertyName)]",
            "        [Alias(\"${1}Id\")]",
            "        [int[]]",
            "        \\$${4}",
            "    )",
            "    begin {",
            "        \\$tssParams = \\$PSBoundParameters",
            "        \\$invokeParams = @{ }",
            "    }",
            "",
            "    process {",
            "        Write-Verbose \"Provided command parameters: \\$(. \\$GetInvocation \\$PSCmdlet.MyInvocation)\"",
            "        if (\\$tssParams.ContainsKey('TssSession') -and \\$TssSession.IsValidSession()) {",
            "            foreach (\\$${7} in \\$${4}) {",
            "                \\$restResponse = \\$null",
            "                \\$uri = \\$TssSession.ApiUrl, '${1}', \\$${8} -join '/'",
            "                \\$invokeParams.Uri = \\$uri",
            "                \\$invokeParams.Method = 'GET'",
            "",
            "                \\$invokeParams.PersonalAccessToken = \\$TssSession.AccessToken",
            "                Write-Verbose \"\\$(\\$invokeParams.Method) \\$uri with \\$body\"",
            "                try {",
            "                    \\$restResponse = Invoke-TssRestApi @invokeParams",
            "                } catch {",
            "                    Write-Warning \"Issue getting ___ on [\\$${7}]\"",
            "                    \\$err = \\$_",
            "                    . \\$ErrorHandling \\$err",
            "                }",
            "",
            "                if (\\$restResponse) {",
            "                    # Do any formatting or call object part",
            "                }",
            "            }",
            "        } else {",
            "            Write-Warning \"No valid session found\"",
            "        }",
            "    }",
            "}"
        ],
        "description": "template for building a Get function"
    },
    "Remove function": {
        "scope": "powershell",
        "prefix": "tssremove",
        "body": [
            "function Remove-${1:Verb} {",
            "    <#",
            "    .SYNOPSIS",
            "    ${2:Short of what command does}",
            "",
            "    .DESCRIPTION",
            "    ${3:Longer of what command does}",
            "",
            "    .EXAMPLE",
            "    PS> \\$session = New-TssSession -SecretServer https://alpha -Credential \\$ssCred",
            "    PS> Remove-Tss${1} -TssSession \\$session -${4} ${5:some test value}",
            "",
            "    ${6:Add minimum example for each parameter}",
            "",
            "    .NOTES",
            "    Requires TssSession object returned by New-TssSession",
            "    #>",
            "    [CmdletBinding(SupportsShouldProcess)]",
            "    [OutputType('TssDelete')]",
            "    param (",
            "        # TssSession object created by New-TssSession for auth",
            "        [Parameter(Mandatory,",
            "            ValueFromPipeline,",
            "            Position = 0)]",
            "        [TssSession]\\$TssSession,",
            "",
            "        # Short description for parameter",
            "        [Parameter(Mandatory,ValueFromPipelineByPropertyName)]",
            "        [Alias(\"${1}Id\")]",
            "        [int[]]",
            "        \\$${4}",
            "    )",
            "    begin {",
            "        \\$tssParams = \\$PSBoundParameters",
            "        \\$invokeParams = @{ }",
            "    }",
            "",
            "    process {",
            "        Write-Verbose \"Provided command parameters: \\$(. \\$GetInvocation \\$PSCmdlet.MyInvocation)\"",
            "        if (\\$tssParams.ContainsKey('TssSession') -and \\$TssSession.IsValidSession()) {",
            "            foreach (\\$${7} in \\$${4}) {",
            "                \\$restResponse = \\$null",
            "                \\$uri = \\$TssSession.ApiUrl, '${9}', \\$${7} -join '/'",
            "                \\$invokeParams.Uri = \\$uri",
            "                \\$invokeParams.Method = 'DELETE'",
            "",
            "                \\$invokeParams.PersonalAccessToken = \\$TssSession.AccessToken",
            "                if (-not \\$PSCmdlet.ShouldProcess(\\$${7},\"\\$(\\$invokeParams.Method) \\$uri\")) { return }",
            "                Write-Verbose \"\\$(\\$invokeParams.Method) \\$uri with \\$body\"",
            "                try {",
            "                    \\$restResponse = Invoke-TssRestApi @invokeParams",
            "                } catch {",
            "                    Write-Warning \"Issue removing [\\$${7}]\"",
            "                    \\$err = \\$_",
            "                    . \\$ErrorHandling \\$err",
            "                }",
            "",
            "                if (\\$restResponse) {",
            "                    [TssDelete]@{",
            "                        Id = \\$restResponse.id",
            "                        ObjectType = \\$restResponse.objectType",
            "                    }",
            "                }",
            "            }",
            "        } else {",
            "            Write-Warning \"No valid session found\"",
            "        }",
            "    }",
            "}"
        ],
        "description": "template for building a Remove function"
    },
    "Set function": {
        "prefix": "tssset",
        "body": [
            "function Set-${1:Verb} {",
            "    <#",
            "    .SYNOPSIS",
            "    Set various properties for a given ${1}",
            "",
            "    .DESCRIPTION",
            "    Set various properties for a given ${1}",
            "",
            "    .EXAMPLE",
            "    PS> \\$session = New-TssSession -SecretServer https://alpha -Credential \\$ssCred",
            "    PS> Remove-Tss${1} -TssSession \\$session -${2} ${3:some test value}",
            "",
            "    ${4:Add minimum example for each parameter}",
            "",
            "    .NOTES",
            "    Requires TssSession object returned by New-TssSession",
            "    #>",
            "    [cmdletbinding(SupportsShouldProcess, DefaultParameterSetName = 'all')]",
            "    param(",
            "        # TssSession object created by New-TssSession for auth",
            "        [Parameter(Mandatory,",
            "            ValueFromPipeline,",
            "            Position = 0)]",
            "        [TssSession]\\$TssSession,",
            "",
            "        # Folder Id to modify",
            "        [Parameter(Mandatory,ValueFromPipelineByPropertyName)]",
            "        [Alias(\"${1}Id\")]",
            "        [int[]]",
            "        \\$${2}},",
            "",
            "    )",
            "    begin {",
            "        \\$setParams = \\$PSBoundParameters",
            "        \\$invokeParams = @{ }",
            "    }",
            "    process {",
            "        Write-Verbose \"Provided command parameters: \\$(. \\$GetInvocation \\$PSCmdlet.MyInvocation)\"",
            "        if (\\$setParams.ContainsKey('TssSession') -and \\$TssSession.IsValidSession()) {",
            "            \\$invokeParams.PersonalAccessToken = \\$TssSession.AccessToken",
            "            foreach (\\$${5} in \\$${2}) {",
            "                \\$restResponse = \\$null",
            "                \\$uri = \\$TssSession.ApiUrl, '${6}', \\$${7} -join '/'",
            "                \\$invokeParams.Uri = \\$uri",
            "                \\$invokeParams.Method = 'PATCH'",
            "",
            "                \\$setBody = @{ data = @{ } }",
            "",
            "                \\$whatIfProcessing = 0",
            "                switch (\\$setParams.Keys) {",
            "                    '${8}' {",
            "                        if (-not \\$PSCmdlet.ShouldProcess(\"${1]Id: \\$${5}\", \"Updating {8} to \\$(\\$${8})\")) {",
            "                            \\$whatIfProcessing++",
            "                        }",
            "                        if ($setParams.ContainsKey('') -and $) {",
            "                            Write-Warning \"Unable to update ${8} when enabling ${9}\"",
            "                            return",
            "                        }",
            "                        \\$setFolderBody.data.allowedTemplates = \\$${8}",
            "                    }",
            "                }",
            "",
            "                \\$invokeParams.Body = \\$setBody | ConvertTo-Json",
            "",
            "                if (\\$PSCmdlet.ShouldProcess(\"${1}ID: \\${5}\", \"\\$(\\$invokeParams.Method) \\$uri with:`n\\$(\\$invokeParams.Body)`n\")) {",
            "                    Write-Verbose \"\\$(\\$invokeParams.Method) \\$uri with:`n\\$(\\$invokeParams.Body)`n\"",
            "                    try {",
            "                        \\$restResponse = Invoke-TssRestApi @invokeParams",
            "                    } catch {",
            "                        Write-Warning \"Issue setting property on ${5} [\\$${5}]\"",
            "                        \\$err = \\$_",
            "                        . \\$ErrorHandling \\$err",
            "                    }",
            "                }",
            "                if (\\$restResponse) {",
            "                    # Do comparison to verify set occurred - verbose output only",
            "                }",
            "            }",
            "        } else {",
            "            Write-Warning \"No valid session found\"",
            "        }",
            "    }",
            "}"
        ],
        "description": "Create a Set command"
    },
    "Base Test": {
        "scope": "powershell",
        "prefix": "tsstest",
        "body": [
            "BeforeDiscovery {",
            "    \\$commandName = Split-Path (\\$PSCommandPath.Replace('.Tests.ps1','')) -Leaf",
            "    . ([IO.Path]::Combine([string]\\$PSScriptRoot, '..', 'constants.ps1'))",
            "}",
            "Describe \"\\$commandName verify parameters\" {",
            "    BeforeDiscovery {",
            "        [object[]]\\$knownParameters = 'TssSession'",
            "        [object[]]\\$currentParams = ([Management.Automation.CommandMetaData]\\$ExecutionContext.SessionState.InvokeCommand.GetCommand(\\$commandName,'Function')).Parameters.Keys",
            "        [object[]]\\$commandDetails = [System.Management.Automation.CommandInfo]\\$ExecutionContext.SessionState.InvokeCommand.GetCommand(\\$commandName,'Function')",
            "        \\$unknownParameters = Compare-Object -ReferenceObject \\$knownParameters -DifferenceObject \\$currentParams -PassThru",
            "    }",
            "    Context \"Verify parameters\" -Foreach @{currentParams = \\$currentParams} {",
            "        It \"\\$commandName should contain <_> parameter\" -TestCases \\$knownParameters {",
            "            \\$_ -in \\$currentParams | Should -Be \\$true",
            "        }",
            "        It \"\\$commandName should not contain parameter: <_>\" -TestCases \\$unknownParameters {",
            "            \\$_ | Should -BeNullOrEmpty",
            "        }",
            "    }",
            "    Context \"Command specific details\" {",
            "        It \"\\$commandName should set OutputType to TssClassName\" -TestCases \\$commandDetails {",
            "            \\$_.OutputType.Name | Should -Be 'TssClassName'",
            "        }",
            "    }",
            "}",
            "Describe \"\\$commandName works\" {",
            "    BeforeDiscovery {",
            "        \\$session = New-TssSession -SecretServer \\$ss -Credential \\$ssCred",
            "        \\$invokeParams = @{",
            "            Uri = \"\\$ss/api/v1/folders?take=\\$(\\$session.take)\"",
            "            ExpandProperty = 'records'",
            "            PersonalAccessToken = \\$session.AccessToken",
            "        }",
            "        \\$getFolders = Invoke-TssRestApi @invokeParams",
            "        \\$tssSecretFolder = \\$getFolders.Where({\\$_.folderPath -match '    ss_module_testing'})",
            "        # Prep work",
            "",
            "        \\$session.SessionExpire()",
            "        \\$props = 'Prop1', 'Prop2', 'Prop3'",
            "    }",
            "    Context \"Checking\" -Foreach @{object = \\$object} {",
            "        It \"Should not be empty\" {",
            "            \\$object | Should -Not -BeNullOrEmpty",
            "        }",
            "        It \"Should output <_> property\" -TestCases \\$props {",
            "            \\$object[0].PSObject.Properties.Name | Should -Contain \\$_",
            "        }",
            "    }",
            "}"
        ],
        "description": "template for tests with Thycotic.SecretServer"
    },
    "Base Part": {
        "scope": "powershell",
        "prefix": "tsspart",
        "body": [
            "<#",
            "    .Synopsis",
            "        Creates a ${1:Class name} object to output the ${2:Model Name} object",
            "#>",
            "param(",
            "    [pscustomobject]\\$Object",
            ")",
            "",
            "begin {",
            "    \\$Properties = \\$Object[0].PSObject.Properties.Name",
            "    \\$itemProperties = \\$Object.items[0].PSObject.Properties.Name",
            "}",
            "",
            "process {",
            "    \\$items = @()",
            "        foreach (\\$i in \\$Object.items) {",
            "            \\$item = [${3:Child class name}]::new()",
            "            foreach (\\$iProp in \\$itemProperties) {",
            "                if (\\$iProp -in \\$item.PSObject.Properties.Name) {",
            "                    \\$item.\\$iProp = \\$i.\\$iProp",
            "                } else {",
            "                    Write-Warning \"Property \\$iProp does not exist in the ${3} class. Please create a bug report at https://github.com/thycotic-ps/thycotic.secretserver/issues/new/choose\"",
            "                }",
            "                \\$items += \\$item",
            "            }",
            "        }",
            "",
            "        \\$outObject = @()",
            "        foreach (\\$s in \\$Object) {",
            "            \\$currentObject = [${1}]::new()",
            "                foreach (\\$sProp in \\$Properties) {",
            "                    if (\\$sProp -eq 'items') {",
            "                        \\$outObject.Items = \\$items",
            "                    }",
            "                    if (\\$sProp -in \\$currentObject.PSObject.Properties.Name) {",
            "                        \\$currentObject.\\$sProp = \\$s.\\$sProp",
            "                    } else {",
            "                        Write-Warning \"Property \\$sProp does not exist in the ${1} class. Please create a bug report at https://github.com/thycotic-ps/thycotic.secretserver/issues/new/choose\"",
            "                    }",
            "                }",
            "                \\$outObject += \\$currentObject",
            "        }",
            "        return \\$outObject",
            "}"
        ],
        "description": "template for parts with Thycotic.SecretServer"
    },
    "About Help": {
        "prefix": "tssabout",
        "body": [
            "TOPIC",
            "    This help topic describes the ${1:Class name} class in the Thycotic.SecretServer module",
            "",
            "CLASS",
            "    ${1}",
            "",
            "INHERITANCE",
            "    None",
            "",
            "DESCRIPTION",
            "    The ${1} class represents the ${2: Model object name from API doc} object returned by Secret Server endpoint ${3:endpoint}",
            "",
            "CONSTRUCTORS",
            "    new()",
            "",
            "PROPERTIES",
            "    Documented in the REST API doc for Secret Server, see ${2} definition",
            "",
            "METHODS",
            "",
            "RELATED LINKS:",
            "    ${4:Function name utilizing it, list multiple if it applies}"
        ],
        "description": "template for the about_classname_help.txt files"
    }
}